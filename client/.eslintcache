[{"/Users/pagaia/Activism/cico-contaiciclisti/client/src/reportWebVitals.js":"1","/Users/pagaia/Activism/cico-contaiciclisti/client/src/index.js":"2","/Users/pagaia/Activism/cico-contaiciclisti/client/src/App.js":"3","/Users/pagaia/Activism/cico-contaiciclisti/client/src/utility/utilityFunctions.js":"4","/Users/pagaia/Activism/cico-contaiciclisti/client/src/utility/constants.js":"5","/Users/pagaia/Activism/cico-contaiciclisti/client/src/components/YesterdayHourly.js":"6","/Users/pagaia/Activism/cico-contaiciclisti/client/src/components/DailyAverage.js":"7","/Users/pagaia/Activism/cico-contaiciclisti/client/src/components/HourlyAverage.js":"8","/Users/pagaia/Activism/cico-contaiciclisti/client/src/components/About.js":"9","/Users/pagaia/Activism/cico-contaiciclisti/client/src/components/LastCount.js":"10","/Users/pagaia/Activism/cico-contaiciclisti/client/src/components/footer.js":"11","/Users/pagaia/Activism/cico-contaiciclisti/client/src/components/Footer.js":"12","/Users/pagaia/Activism/cico-contaiciclisti/client/src/components/ScrollTo.js":"13","/Users/pagaia/Activism/Cico/contaiciclisti/client/src/App.js":"14","/Users/pagaia/Activism/Cico/contaiciclisti/client/src/components/LastCount.js":"15","/Users/pagaia/Activism/Cico/contaiciclisti/client/src/components/CountCard.js":"16","/Users/pagaia/Activism/Cico/contaiciclisti/client/src/components/map/ViewMap.js":"17","/Users/pagaia/Activism/Cico/contaiciclisti/client/src/index.js":"18","/Users/pagaia/Activism/Cico/contaiciclisti/client/src/utility/constants.js":"19","/Users/pagaia/Activism/Cico/contaiciclisti/client/src/components/YesterdayHourly.js":"20","/Users/pagaia/Activism/Cico/contaiciclisti/client/src/components/HourlyAverage.js":"21","/Users/pagaia/Activism/Cico/contaiciclisti/client/src/components/About.js":"22","/Users/pagaia/Activism/Cico/contaiciclisti/client/src/utility/utilityFunctions.js":"23","/Users/pagaia/Activism/Cico/contaiciclisti/client/src/components/Footer.js":"24","/Users/pagaia/Activism/Cico/contaiciclisti/client/src/components/ScrollTo.js":"25","/Users/pagaia/Activism/Cico/contaiciclisti/client/src/components/DailyAverage.js":"26","/Users/pagaia/Activism/Cico/contaiciclisti/client/src/reportWebVitals.js":"27","/Users/pagaia/Activism/Cico/contaiciclisti/client/src/pages/Device.js":"28","/Users/pagaia/Activism/Cico/contaiciclisti/client/src/components/map/CounterIcon.js":"29"},{"size":362,"mtime":1607794596704,"results":"30","hashOfConfig":"31"},{"size":514,"mtime":1607882939367,"results":"32","hashOfConfig":"31"},{"size":1560,"mtime":1607883828939,"results":"33","hashOfConfig":"31"},{"size":5849,"mtime":1607875382867,"results":"34","hashOfConfig":"31"},{"size":786,"mtime":1607869609121,"results":"35","hashOfConfig":"31"},{"size":1350,"mtime":1607882830596,"results":"36","hashOfConfig":"31"},{"size":2160,"mtime":1607882806962,"results":"37","hashOfConfig":"31"},{"size":1387,"mtime":1607882817574,"results":"38","hashOfConfig":"31"},{"size":1540,"mtime":1607881651272,"results":"39","hashOfConfig":"31"},{"size":1468,"mtime":1607880387538,"results":"40","hashOfConfig":"31"},{"size":244,"mtime":1607881722821,"results":"41","hashOfConfig":"31"},{"size":300,"mtime":1607883890367,"results":"42","hashOfConfig":"31"},{"size":449,"mtime":1607883818936,"results":"43","hashOfConfig":"31"},{"size":1187,"mtime":1608073099436,"results":"44","hashOfConfig":"45"},{"size":925,"mtime":1608065352390,"results":"46","hashOfConfig":"45"},{"size":578,"mtime":1608071255905,"results":"47","hashOfConfig":"45"},{"size":1479,"mtime":1608073161703,"results":"48","hashOfConfig":"45"},{"size":514,"mtime":1607951975973,"results":"49","hashOfConfig":"45"},{"size":2410,"mtime":1608070777383,"results":"50","hashOfConfig":"45"},{"size":1361,"mtime":1608065034148,"results":"51","hashOfConfig":"45"},{"size":1398,"mtime":1608065037615,"results":"52","hashOfConfig":"45"},{"size":1540,"mtime":1607951975975,"results":"53","hashOfConfig":"45"},{"size":5882,"mtime":1608064879115,"results":"54","hashOfConfig":"45"},{"size":290,"mtime":1607980207713,"results":"55","hashOfConfig":"45"},{"size":449,"mtime":1607951975974,"results":"56","hashOfConfig":"45"},{"size":2179,"mtime":1608064917543,"results":"57","hashOfConfig":"45"},{"size":362,"mtime":1607951975972,"results":"58","hashOfConfig":"45"},{"size":1170,"mtime":1608071879119,"results":"59","hashOfConfig":"45"},{"size":164,"mtime":1608068400983,"results":"60","hashOfConfig":"45"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},"chyk9i",{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"68"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"68"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"dz142w",{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"109"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"103"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"127"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/pagaia/Activism/cico-contaiciclisti/client/src/reportWebVitals.js",[],["134","135"],"/Users/pagaia/Activism/cico-contaiciclisti/client/src/index.js",["136"],"/Users/pagaia/Activism/cico-contaiciclisti/client/src/App.js",[],["137","138"],"/Users/pagaia/Activism/cico-contaiciclisti/client/src/utility/utilityFunctions.js",["139","140","141","142","143"],"/**\n * calculate the start and end date for today\n */\nexport const getBeginningOfToday = () => {\n  let start = new Date();\n  return start.toISOString().split(\"T\")[0];\n};\n\n/**\n * calculate the start and end date for yesterday\n */\nexport const getYesterdayStartEnd = () => {\n  let end = new Date();\n  let start = new Date(end);\n\n  start.setDate(start.getDate() - 1);\n\n  end = end.toISOString().split(\"T\")[0];\n  start = start.toISOString().split(\"T\")[0];\n\n  return { start, end };\n};\n\n/**\n * calculate the start and end date for previous month\n */\nexport const getLastMonthStartEnd = () => {\n  let end = new Date();\n  end.setDate(1);\n  let start = new Date(end);\n  start.setMonth(start.getMonth() - 1);\n\n  end = end.toISOString().split(\"T\")[0];\n  start = start.toISOString().split(\"T\")[0];\n\n  return { start, end };\n};\n\n\n/**\n * This function gets the list of counts and device information and build labels and datasets for hourly counts\n *\n * @param {Array} feeds\n * @param {Object} device\n */\nexport const buildDataHourly = (feeds, device) => {\n  const { name: label, bgColor, borderColor, hbgColor } = device;\n\n  const labels = [];\n  const datasets = [\n    {\n      label,\n      backgroundColor: bgColor || \"rgba(54, 162, 235, 0.2)\",\n      borderColor: borderColor || \"rgba(54, 162, 235, 1)\",\n      borderWidth: 1,\n      hoverBackgroundColor: hbgColor || \"rgba(255,99,132,0.4)\",\n      // hoverBorderColor: \"rgba(255,99,132,1)\",\n      data: [],\n    },\n  ];\n\n  feeds.forEach((feed) => {\n    if (feed.field1) {\n      const hour =\n        feed.created_at.substring(11, 12) === \"0\"\n          ? feed.created_at.substring(12, 13)\n          : feed.created_at.substring(11, 13);\n      labels.push(hour);\n      datasets[0].data.push(parseInt(feed.field1, 10));\n    }\n  });\n  return { labels, datasets };\n};\n\n/**\n * Utility function to sum up an array of numbers\n * @param {Number} accumulator\n * @param {Number} currentValue\n */\nconst sumReducer = (accumulator, currentValue) => accumulator + currentValue;\n\n/**\n *  This function gets the list of counts and device information and build labels and datasets for Daily Average counts\n *\n * @param {Array} feeds\n * @param {Object} device\n */\nexport const buildDataDailyAverage = (feeds, device) => {\n  const { name: label, bgColor, borderColor, hbgColor } = device;\n\n  const labels = [\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n    \"Sunday\",\n  ];\n\n  const dataset = {\n    label,\n    backgroundColor: bgColor || \"rgba(54, 162, 235, 0.2)\",\n    borderColor: borderColor || \"rgba(54, 162, 235, 1)\",\n    borderWidth: 1,\n    hoverBackgroundColor: hbgColor || \"rgba(255,99,132,0.4)\",\n    data: [],\n  };\n\n  const weekDays = [];\n\n  feeds.forEach((feed) => {\n    if (feed.field1) {\n      const day = new Date(feed.created_at);\n      if (weekDays[day.getDay()]) {\n        weekDays[day.getDay()].push(parseInt(feed.field1, 10));\n      } else {\n        weekDays[day.getDay()] = [parseInt(feed.field1, 10)];\n      }\n    }\n  });\n\n  for (let i = 1; i < 7; i++) {\n    dataset.data.push(\n      parseInt(weekDays[i].reduce(sumReducer) / weekDays[i].length, 10)\n    );\n  }\n  dataset.data.push(\n    parseInt(weekDays[0].reduce(sumReducer) / weekDays[0].length, 10)\n  );\n\n  return dataset;\n};\n\n/**\n * This function gets the list of counts and device information and build labels and datasets for hourly Average counts\n *\n * @param {Array} feeds\n * @param {Object} device\n */\nexport const buildHourlyAverage = (feeds, device) => {\n  const { name: label, bgColor, borderColor, hbgColor } = device;\n\n  const labels = [...Array(23).keys()];\n\n  const datasets = [\n    {\n      label: \"Weekdays\",\n      backgroundColor: \"rgba(255, 99, 132, 0.2)\",\n      borderColor: \"rgba(255, 99, 132, 1)\",\n      hoverBackgroundColor: \"rgba(255, 99, 132, 0.6)\",\n      borderWidth: 1,\n      data: [],\n    },\n    {\n      label: \"Saturday\",\n      borderWidth: 1,\n      backgroundColor: \"rgba(54, 162, 235, 0.2)\",\n      borderColor: \"rgba(54, 162, 235, 1)\",\n      hoverBackgroundColor: \"rgba(54, 162, 235, 0.6)\",\n      data: [],\n    },\n    {\n      label: \"Sunday\",\n      borderWidth: 1,\n      backgroundColor: \"rgba(154, 162, 235, 0.2)\",\n      borderColor: \"rgba(154, 162, 235, 1)\",\n      hoverBackgroundColor: \"rgba(154, 162, 235, 0.6)\",\n      data: [],\n    },\n  ];\n\n  const weekDays = [];\n  const saturday = [];\n  const sunday = [];\n\n  feeds.forEach((feed) => {\n    if (feed.field1) {\n      const day = new Date(feed.created_at).getDay();\n      const hour = new Date(feed.created_at).getHours();\n\n      // Sunday\n      if (day === 0) {\n        if (sunday[hour]) {\n          sunday[hour].push(parseInt(feed.field1, 10));\n        } else {\n          sunday[hour] = [parseInt(feed.field1, 10)];\n        }\n      }\n      // Saturday\n      if (day === 6) {\n        if (saturday[hour]) {\n          saturday[hour].push(parseInt(feed.field1, 10));\n        } else {\n          saturday[hour] = [parseInt(feed.field1, 10)];\n        }\n      }\n\n      // weekdays\n      if (1 <= day <= 5) {\n        if (weekDays[hour]) {\n          weekDays[hour].push(parseInt(feed.field1, 10));\n        } else {\n          weekDays[hour] = [parseInt(feed.field1, 10)];\n        }\n      }\n    }\n  });\n\n  // adding hourly Average  for week days\n  weekDays.forEach((hour) => {\n    datasets[0].data.push(parseInt(hour.reduce(sumReducer) / hour.length, 10));\n  });\n\n  // adding hourly Average  for saturday\n  saturday.forEach((hour) => {\n    datasets[1].data.push(parseInt(hour.reduce(sumReducer) / hour.length, 10));\n  });\n\n  // adding hourly Average  for sunday\n  sunday.forEach((hour) => {\n    datasets[2].data.push(parseInt(hour.reduce(sumReducer) / hour.length, 10));\n  });\n\n  return { labels, datasets };\n};\n\n/**\n * random key genrator for ChartJs\n */\nexport const datasetKeyProvider = () => {\n  return btoa(Math.random()).substring(0, 12);\n};\n","/Users/pagaia/Activism/cico-contaiciclisti/client/src/utility/constants.js",[],"/Users/pagaia/Activism/cico-contaiciclisti/client/src/components/YesterdayHourly.js",["144"],"/Users/pagaia/Activism/cico-contaiciclisti/client/src/components/DailyAverage.js",["145","146"],"/Users/pagaia/Activism/cico-contaiciclisti/client/src/components/HourlyAverage.js",["147"],"import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { REGEX_DEVICE } from \"../utility/constants\";\nimport {\n  buildHourlyAverage,\n  getLastMonthStartEnd,\n} from \"../utility/utilityFunctions\";\n\nconst deviceUrl = \"https://api.thingspeak.com/channels/DEVICE/feeds.json\";\n\nconst { start, end } = getLastMonthStartEnd();\n\nfunction HourlyAverage({ device }) {\n  // initialize dataset with empty array\n  const [datasets, setDatasets] = useState({});\n\n  async function fetchDeviceData() {\n    // replace with channelID\n    const apiEndPoint =\n      deviceUrl.replace(REGEX_DEVICE, device.channelId) +\n      `?start=${start}&end=${end}`;\n\n    // fetch data from a url endpoint\n    const response = await axios.get(apiEndPoint);\n    const { data } = response;\n    const builtDataset = buildHourlyAverage(data.feeds, device);\n    setDatasets(builtDataset);\n  }\n\n  useEffect(() => {\n    fetchDeviceData();\n  }, []);\n\n  if (!datasets.datasets) {\n    return null;\n  }\n  return (\n    <div className=\"row\">\n      <div className=\"col-sm\">\n        <div className=\"chart-wrapper\">\n          <Bar\n            data={datasets}\n            width={100}\n            height={50}\n            options={{\n              maintainAspectRatio: true,\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default HourlyAverage;\n","/Users/pagaia/Activism/cico-contaiciclisti/client/src/components/About.js",[],"/Users/pagaia/Activism/cico-contaiciclisti/client/src/components/LastCount.js",["148"],"import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { REGEX_DEVICE } from \"../utility/constants\";\nimport { format } from \"timeago.js\";\n\nconst deviceUrl = \"https://api.thingspeak.com/channels/DEVICE/feeds/last.json\";\n\nfunction LastCount({ device }) {\n  const [counts, setCounts] = useState({});\n\n  // replace with channelID\n  const apiEndPoint = deviceUrl.replace(REGEX_DEVICE, device.channelId);\n\n  const getCount = async () => {\n    let res = await axios.get(apiEndPoint);\n    let { data } = res;\n    setCounts(data);\n  };\n\n  useEffect(() => {\n    getCount();\n  }, []);\n\n  return (\n    <div className=\"last-counter\">\n      <div className=\"card last\">\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">Last count</h5>\n          <p className=\"card-text inverted\">{counts.field1}</p>\n          <footer className=\"blockquote-footer\">\n            {\n              // format date string\n              format(counts.created_at)\n            }\n          </footer>\n        </div>\n      </div>\n\n      <div className=\"card last\">\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">Total today</h5>\n          <p className=\"card-text inverted\">{counts.field8}</p>\n          <footer className=\"blockquote-footer\">\n            {\n              // format date string\n              format(counts.created_at)\n            }\n          </footer>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default LastCount;\n","/Users/pagaia/Activism/cico-contaiciclisti/client/src/components/footer.js",[],"/Users/pagaia/Activism/cico-contaiciclisti/client/src/components/Footer.js",["149"],"/Users/pagaia/Activism/cico-contaiciclisti/client/src/components/ScrollTo.js",[],"/Users/pagaia/Activism/Cico/contaiciclisti/client/src/App.js",[],"/Users/pagaia/Activism/Cico/contaiciclisti/client/src/components/LastCount.js",["150"],"/Users/pagaia/Activism/Cico/contaiciclisti/client/src/components/CountCard.js",[],"/Users/pagaia/Activism/Cico/contaiciclisti/client/src/components/map/ViewMap.js",[],"/Users/pagaia/Activism/Cico/contaiciclisti/client/src/index.js",["151"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log);\n",["152","153"],"/Users/pagaia/Activism/Cico/contaiciclisti/client/src/utility/constants.js",[],"/Users/pagaia/Activism/Cico/contaiciclisti/client/src/components/YesterdayHourly.js",["154"],"import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { REGEX_DEVICE } from \"../utility/constants\";\nimport {\n  buildDataHourly,\n  getYesterdayStartEnd,\n} from \"../utility/utilityFunctions\";\n\nconst deviceUrl = \"https://api.thingspeak.com/channels/DEVICE/feeds.json\";\n\nconst { start: yesterdayStart, end: yesterdayEnd } = getYesterdayStartEnd();\n\nfunction YesterdayHourly({ device }) {\n  const [yesterday, setYesterday] = useState({});\n\n  async function fetchDeviceData() {\n    // replace with channelID\n    const apiEndPoint =\n      deviceUrl.replace(REGEX_DEVICE, device.properties.channelId) +\n      `?start=${yesterdayStart}&end=${yesterdayEnd}`;\n\n    // fetch data from a url endpoint\n    const response = await axios.get(apiEndPoint);\n    const { data } = response;\n    const chart = buildDataHourly(data.feeds, device);\n    setYesterday(chart);\n    return data;\n  }\n\n  useEffect(() => {\n    fetchDeviceData();\n  }, []);\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-sm\">\n        <div className=\"chart-wrapper\">\n          <Bar\n            data={yesterday}\n            width={100}\n            height={50}\n            options={{\n              maintainAspectRatio: true,\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default YesterdayHourly;\n",["155","156"],"/Users/pagaia/Activism/Cico/contaiciclisti/client/src/components/HourlyAverage.js",["157"],"import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { REGEX_DEVICE } from \"../utility/constants\";\nimport {\n  buildHourlyAverage,\n  getLastMonthStartEnd,\n} from \"../utility/utilityFunctions\";\n\nconst deviceUrl = \"https://api.thingspeak.com/channels/DEVICE/feeds.json\";\n\nconst { start, end } = getLastMonthStartEnd();\n\nfunction HourlyAverage({ device }) {\n  // initialize dataset with empty array\n  const [datasets, setDatasets] = useState({});\n\n  async function fetchDeviceData() {\n    // replace with channelID\n    const apiEndPoint =\n      deviceUrl.replace(REGEX_DEVICE, device.properties.channelId) +\n      `?start=${start}&end=${end}`;\n\n    // fetch data from a url endpoint\n    const response = await axios.get(apiEndPoint);\n    const { data } = response;\n    const builtDataset = buildHourlyAverage(data.feeds, device);\n    setDatasets(builtDataset);\n  }\n\n  useEffect(() => {\n    fetchDeviceData();\n  }, []);\n\n  if (!datasets.datasets) {\n    return null;\n  }\n  return (\n    <div className=\"row\">\n      <div className=\"col-sm\">\n        <div className=\"chart-wrapper\">\n          <Bar\n            data={datasets}\n            width={100}\n            height={50}\n            options={{\n              maintainAspectRatio: true,\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default HourlyAverage;\n","/Users/pagaia/Activism/Cico/contaiciclisti/client/src/components/About.js",[],["158","159"],"/Users/pagaia/Activism/Cico/contaiciclisti/client/src/utility/utilityFunctions.js",["160","161","162","163","164"],"/**\n * calculate the start and end date for today\n */\nexport const getBeginningOfToday = () => {\n  let start = new Date();\n  return start.toISOString().split(\"T\")[0];\n};\n\n/**\n * calculate the start and end date for yesterday\n */\nexport const getYesterdayStartEnd = () => {\n  let end = new Date();\n  let start = new Date(end);\n\n  start.setDate(start.getDate() - 1);\n\n  end = end.toISOString().split(\"T\")[0];\n  start = start.toISOString().split(\"T\")[0];\n\n  return { start, end };\n};\n\n/**\n * calculate the start and end date for previous month\n */\nexport const getLastMonthStartEnd = () => {\n  let end = new Date();\n  end.setDate(1);\n  let start = new Date(end);\n  start.setMonth(start.getMonth() - 1);\n\n  end = end.toISOString().split(\"T\")[0];\n  start = start.toISOString().split(\"T\")[0];\n\n  return { start, end };\n};\n\n\n/**\n * This function gets the list of counts and device information and build labels and datasets for hourly counts\n *\n * @param {Array} feeds\n * @param {Object} device\n */\nexport const buildDataHourly = (feeds, device) => {\n  const { name: label, bgColor, borderColor, hbgColor } = device.properties;\n\n  const labels = [];\n  const datasets = [\n    {\n      label,\n      backgroundColor: bgColor || \"rgba(54, 162, 235, 0.2)\",\n      borderColor: borderColor || \"rgba(54, 162, 235, 1)\",\n      borderWidth: 1,\n      hoverBackgroundColor: hbgColor || \"rgba(255,99,132,0.4)\",\n      // hoverBorderColor: \"rgba(255,99,132,1)\",\n      data: [],\n    },\n  ];\n\n  feeds.forEach((feed) => {\n    if (feed.field1) {\n      const hour =\n        feed.created_at.substring(11, 12) === \"0\"\n          ? feed.created_at.substring(12, 13)\n          : feed.created_at.substring(11, 13);\n      labels.push(hour);\n      datasets[0].data.push(parseInt(feed.field1, 10));\n    }\n  });\n  return { labels, datasets };\n};\n\n/**\n * Utility function to sum up an array of numbers\n * @param {Number} accumulator\n * @param {Number} currentValue\n */\nconst sumReducer = (accumulator, currentValue) => accumulator + currentValue;\n\n/**\n *  This function gets the list of counts and device information and build labels and datasets for Daily Average counts\n *\n * @param {Array} feeds\n * @param {Object} device\n */\nexport const buildDataDailyAverage = (feeds, device) => {\n  const { name: label, bgColor, borderColor, hbgColor } = device.properties;\n\n  const labels = [\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n    \"Sunday\",\n  ];\n\n  const dataset = {\n    label,\n    backgroundColor: bgColor || \"rgba(54, 162, 235, 0.2)\",\n    borderColor: borderColor || \"rgba(54, 162, 235, 1)\",\n    borderWidth: 1,\n    hoverBackgroundColor: hbgColor || \"rgba(255,99,132,0.4)\",\n    data: [],\n  };\n\n  const weekDays = [];\n\n  feeds.forEach((feed) => {\n    if (feed.field1) {\n      const day = new Date(feed.created_at);\n      if (weekDays[day.getDay()]) {\n        weekDays[day.getDay()].push(parseInt(feed.field1, 10));\n      } else {\n        weekDays[day.getDay()] = [parseInt(feed.field1, 10)];\n      }\n    }\n  });\n\n  for (let i = 1; i < 7; i++) {\n    dataset.data.push(\n      parseInt(weekDays[i].reduce(sumReducer) / weekDays[i].length, 10)\n    );\n  }\n  dataset.data.push(\n    parseInt(weekDays[0].reduce(sumReducer) / weekDays[0].length, 10)\n  );\n\n  return dataset;\n};\n\n/**\n * This function gets the list of counts and device information and build labels and datasets for hourly Average counts\n *\n * @param {Array} feeds\n * @param {Object} device\n */\nexport const buildHourlyAverage = (feeds, device) => {\n  const { name: label, bgColor, borderColor, hbgColor } = device.properties;\n\n  const labels = [...Array(23).keys()];\n\n  const datasets = [\n    {\n      label: \"Weekdays\",\n      backgroundColor: \"rgba(255, 99, 132, 0.2)\",\n      borderColor: \"rgba(255, 99, 132, 1)\",\n      hoverBackgroundColor: \"rgba(255, 99, 132, 0.6)\",\n      borderWidth: 1,\n      data: [],\n    },\n    {\n      label: \"Saturday\",\n      borderWidth: 1,\n      backgroundColor: \"rgba(54, 162, 235, 0.2)\",\n      borderColor: \"rgba(54, 162, 235, 1)\",\n      hoverBackgroundColor: \"rgba(54, 162, 235, 0.6)\",\n      data: [],\n    },\n    {\n      label: \"Sunday\",\n      borderWidth: 1,\n      backgroundColor: \"rgba(154, 162, 235, 0.2)\",\n      borderColor: \"rgba(154, 162, 235, 1)\",\n      hoverBackgroundColor: \"rgba(154, 162, 235, 0.6)\",\n      data: [],\n    },\n  ];\n\n  const weekDays = [];\n  const saturday = [];\n  const sunday = [];\n\n  feeds.forEach((feed) => {\n    if (feed.field1) {\n      const day = new Date(feed.created_at).getDay();\n      const hour = new Date(feed.created_at).getHours();\n\n      // Sunday\n      if (day === 0) {\n        if (sunday[hour]) {\n          sunday[hour].push(parseInt(feed.field1, 10));\n        } else {\n          sunday[hour] = [parseInt(feed.field1, 10)];\n        }\n      }\n      // Saturday\n      if (day === 6) {\n        if (saturday[hour]) {\n          saturday[hour].push(parseInt(feed.field1, 10));\n        } else {\n          saturday[hour] = [parseInt(feed.field1, 10)];\n        }\n      }\n\n      // weekdays\n      if (1 <= day <= 5) {\n        if (weekDays[hour]) {\n          weekDays[hour].push(parseInt(feed.field1, 10));\n        } else {\n          weekDays[hour] = [parseInt(feed.field1, 10)];\n        }\n      }\n    }\n  });\n\n  // adding hourly Average  for week days\n  weekDays.forEach((hour) => {\n    datasets[0].data.push(parseInt(hour.reduce(sumReducer) / hour.length, 10));\n  });\n\n  // adding hourly Average  for saturday\n  saturday.forEach((hour) => {\n    datasets[1].data.push(parseInt(hour.reduce(sumReducer) / hour.length, 10));\n  });\n\n  // adding hourly Average  for sunday\n  sunday.forEach((hour) => {\n    datasets[2].data.push(parseInt(hour.reduce(sumReducer) / hour.length, 10));\n  });\n\n  return { labels, datasets };\n};\n\n/**\n * random key genrator for ChartJs\n */\nexport const datasetKeyProvider = () => {\n  return btoa(Math.random()).substring(0, 12);\n};\n","/Users/pagaia/Activism/Cico/contaiciclisti/client/src/components/Footer.js",["165"],"import React from \"react\";\nimport ScrollTo from \"./ScrollTo\";\n\nconst Footer = () => {\n  return (\n    <footer className=\"footer\">\n      <p>\n        &copy; 2020 <a href=\"https://twitter.com/pagaia\">pagaia</a>\n      </p>\n      {/* <ScrollTo/> */}\n    </footer>\n  );\n};\n\nexport default Footer;\n","/Users/pagaia/Activism/Cico/contaiciclisti/client/src/components/ScrollTo.js",[],"/Users/pagaia/Activism/Cico/contaiciclisti/client/src/components/DailyAverage.js",["166","167"],"import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport {\n  buildDataDailyAverage,\n  datasetKeyProvider,\n  getLastMonthStartEnd,\n} from \"../utility/utilityFunctions\";\nimport PropTypes from \"prop-types\";\nimport { REGEX_DEVICE } from \"../utility/constants\";\n\nconst deviceUrl = \"https://api.thingspeak.com/channels/DEVICE/feeds.json\";\n\nconst { start: lastMonthStart, end: lastMonthEnd } = getLastMonthStartEnd();\n\nfunction DailyAverage({ devices }) {\n  // initialize dataset with empty array\n  const [datasets, setDatasets] = useState(Array(devices.length).fill([]));\n\n  const labels = [\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n    \"Sunday\",\n  ];\n\n  useEffect(() => {\n    const newDatasets = [];\n\n    async function fetchAverage(device, idx) {\n      // replace with channelID\n      const apiEndPoint =\n        deviceUrl.replace(REGEX_DEVICE, device.properties.channelId) +\n        `?average=daily&start=${lastMonthStart}&end=${lastMonthEnd}`;\n\n      // fetch data from a url endpoint\n      const response = await axios.get(apiEndPoint);\n      const { data } = response;\n\n      const builtDataset = buildDataDailyAverage(data.feeds, device);\n      newDatasets[idx] = builtDataset;\n      return data;\n    }\n\n    // fetch data per each device\n    devices.map((device, idx) => {\n      fetchAverage(device, idx).then(() => {\n        setDatasets([...newDatasets]);\n      });\n    });\n  }, []);\n\n  const data = {\n    labels,\n    datasets: datasets.filter(function (element) {\n      return element !== undefined;\n    }),\n  };\n\n  return (\n    <div>\n      <h3>Last month</h3>\n      <div className=\"chart-wrapper\">\n        <Bar\n          data={data}\n          width={100}\n          height={50}\n          options={{\n            maintainAspectRatio: true,\n          }}\n          datasetKeyProvider={datasetKeyProvider}\n        />\n      </div>\n    </div>\n  );\n}\n\nDailyAverage.propTypes = {\n  device: PropTypes.shape({\n    name: PropTypes.string,\n    channelId: PropTypes.number,\n    bgColor: PropTypes.string,\n    borderColor: PropTypes.string,\n  }),\n};\nexport default DailyAverage;\n",["168","169"],"/Users/pagaia/Activism/Cico/contaiciclisti/client/src/reportWebVitals.js",[],"/Users/pagaia/Activism/Cico/contaiciclisti/client/src/pages/Device.js",[],"/Users/pagaia/Activism/Cico/contaiciclisti/client/src/components/map/CounterIcon.js",[],{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","replacedBy":"173"},{"ruleId":"174","severity":1,"message":"175","line":5,"column":8,"nodeType":"176","messageId":"177","endLine":5,"endColumn":23},{"ruleId":"170","replacedBy":"178"},{"ruleId":"172","replacedBy":"179"},{"ruleId":"174","severity":1,"message":"180","line":91,"column":9,"nodeType":"176","messageId":"177","endLine":91,"endColumn":15},{"ruleId":"174","severity":1,"message":"181","line":142,"column":17,"nodeType":"176","messageId":"177","endLine":142,"endColumn":22},{"ruleId":"174","severity":1,"message":"182","line":142,"column":24,"nodeType":"176","messageId":"177","endLine":142,"endColumn":31},{"ruleId":"174","severity":1,"message":"183","line":142,"column":33,"nodeType":"176","messageId":"177","endLine":142,"endColumn":44},{"ruleId":"174","severity":1,"message":"184","line":142,"column":46,"nodeType":"176","messageId":"177","endLine":142,"endColumn":54},{"ruleId":"185","severity":1,"message":"186","line":33,"column":6,"nodeType":"187","endLine":33,"endColumn":8,"suggestions":"188"},{"ruleId":"189","severity":1,"message":"190","line":49,"column":31,"nodeType":"191","messageId":"192","endLine":49,"endColumn":33},{"ruleId":"185","severity":1,"message":"193","line":54,"column":6,"nodeType":"187","endLine":54,"endColumn":8,"suggestions":"194"},{"ruleId":"185","severity":1,"message":"186","line":33,"column":6,"nodeType":"187","endLine":33,"endColumn":8,"suggestions":"195"},{"ruleId":"185","severity":1,"message":"196","line":22,"column":6,"nodeType":"187","endLine":22,"endColumn":8,"suggestions":"197"},{"ruleId":"174","severity":1,"message":"198","line":2,"column":8,"nodeType":"176","messageId":"177","endLine":2,"endColumn":16},{"ruleId":"185","severity":1,"message":"196","line":22,"column":6,"nodeType":"187","endLine":22,"endColumn":8,"suggestions":"199"},{"ruleId":"174","severity":1,"message":"175","line":5,"column":8,"nodeType":"176","messageId":"177","endLine":5,"endColumn":23},{"ruleId":"170","replacedBy":"200"},{"ruleId":"172","replacedBy":"201"},{"ruleId":"185","severity":1,"message":"186","line":33,"column":6,"nodeType":"187","endLine":33,"endColumn":8,"suggestions":"202"},{"ruleId":"170","replacedBy":"203"},{"ruleId":"172","replacedBy":"204"},{"ruleId":"185","severity":1,"message":"186","line":33,"column":6,"nodeType":"187","endLine":33,"endColumn":8,"suggestions":"205"},{"ruleId":"170","replacedBy":"206"},{"ruleId":"172","replacedBy":"207"},{"ruleId":"174","severity":1,"message":"180","line":91,"column":9,"nodeType":"176","messageId":"177","endLine":91,"endColumn":15},{"ruleId":"174","severity":1,"message":"181","line":142,"column":17,"nodeType":"176","messageId":"177","endLine":142,"endColumn":22},{"ruleId":"174","severity":1,"message":"182","line":142,"column":24,"nodeType":"176","messageId":"177","endLine":142,"endColumn":31},{"ruleId":"174","severity":1,"message":"183","line":142,"column":33,"nodeType":"176","messageId":"177","endLine":142,"endColumn":44},{"ruleId":"174","severity":1,"message":"184","line":142,"column":46,"nodeType":"176","messageId":"177","endLine":142,"endColumn":54},{"ruleId":"174","severity":1,"message":"198","line":2,"column":8,"nodeType":"176","messageId":"177","endLine":2,"endColumn":16},{"ruleId":"189","severity":1,"message":"190","line":49,"column":31,"nodeType":"191","messageId":"192","endLine":49,"endColumn":33},{"ruleId":"185","severity":1,"message":"193","line":54,"column":6,"nodeType":"187","endLine":54,"endColumn":8,"suggestions":"208"},{"ruleId":"170","replacedBy":"209"},{"ruleId":"172","replacedBy":"210"},"no-native-reassign",["211"],"no-negated-in-lhs",["212"],"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar",["211"],["212"],"'labels' is assigned a value but never used.","'label' is assigned a value but never used.","'bgColor' is assigned a value but never used.","'borderColor' is assigned a value but never used.","'hbgColor' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchDeviceData'. Either include it or remove the dependency array.","ArrayExpression",["213"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'devices'. Either include it or remove the dependency array.",["214"],["215"],"React Hook useEffect has a missing dependency: 'getCount'. Either include it or remove the dependency array.",["216"],"'ScrollTo' is defined but never used.",["217"],["211"],["212"],["218"],["211"],["212"],["219"],["211"],["212"],["220"],["211"],["212"],"no-global-assign","no-unsafe-negation",{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},{"desc":"221","fix":"225"},{"desc":"226","fix":"227"},{"desc":"226","fix":"228"},{"desc":"221","fix":"229"},{"desc":"221","fix":"230"},{"desc":"223","fix":"231"},"Update the dependencies array to be: [fetchDeviceData]",{"range":"232","text":"233"},"Update the dependencies array to be: [devices]",{"range":"234","text":"235"},{"range":"236","text":"233"},"Update the dependencies array to be: [getCount]",{"range":"237","text":"238"},{"range":"239","text":"238"},{"range":"240","text":"233"},{"range":"241","text":"233"},{"range":"242","text":"235"},[973,975],"[fetchDeviceData]",[1494,1496],"[devices]",[964,966],[593,595],"[getCount]",[604,606],[984,986],[975,977],[1493,1495]]